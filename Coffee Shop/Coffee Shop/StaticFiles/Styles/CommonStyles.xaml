<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style TargetType="{x:Type Page}" x:Key="PageMarginTop">
        <Setter Property="Margin" Value="0 60 0 0"/>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="LogInTextBox">
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="CaretBrush" Value="LightGray"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="0,0,0,2"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="20 0 0 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFFADF5A"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#CFB73E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton">
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Width="18" Height="18"
                                            CornerRadius="9"
                                            Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center"
                                                          HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="AdminMenuButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder" 
                            Padding="0 8" 
                            Margin="0 8" 
                            Cursor="Hand"
                            BorderThickness="1" 
                            CornerRadius="13"
                            HorizontalAlignment="Center"
                            BorderBrush="DarkGray"
                            Width="200">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#CFB73E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ButtonBlack">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder" 
                            Padding="0 8" 
                            Margin="0 8" 
                            Cursor="Hand"
                            BorderThickness="1" 
                            CornerRadius="13"
                            Width="{TemplateBinding Width}"
                            HorizontalAlignment="Center"
                            BorderBrush="DarkGray">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#CFB73E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="SmallButton">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder" 
                            Padding="0 4" 
                            Margin="0 1"
                            CornerRadius="13"
                            Width="{TemplateBinding Width}"
                            HorizontalAlignment="Center"
                            BorderBrush="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Border.Background" Value="#464646" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="ButtonClose">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Content" Value="✕"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="FontFamily" Value="Montserrat"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Width="18" Height="18"
                            CornerRadius="9"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="DarkRed"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="RadioButton" x:Key="RadioButtonBack">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border Name="border" CornerRadius="13" BorderBrush="Transparent" BorderThickness="1">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="#CFB73E"/>
                            <Setter TargetName="border" Property="Border.BorderThickness" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="RadioButton.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(RadioButton.Background).(SolidColorBrush.Color)">
                                            <LinearColorKeyFrame KeyTime="0:0:2" Value="#CFB73E"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="RadioButton.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(RadioButton.Background).(SolidColorBrush.Color)">
                                            <LinearColorKeyFrame KeyTime="0:0:2" Value="Transparent"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenChangePassword">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioChangePassword, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioChangePassword, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenProfile">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioProfile, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioProfile, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenNotifications">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioNotifications, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioNotifications, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenEmail">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioJoin, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioJoin, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ChangeCommandJoinLog">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border HorizontalAlignment="Center" 
                            Width="150" x:Name="border"
                            CornerRadius="13"
                            Padding="5" BorderThickness="1" 
                            BorderBrush="DarkGray">
                        <ContentPresenter HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="#CFB73E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioJoin, Path=IsChecked}" Value="True">
                <Setter Property="Command" Value="{Binding JoinCommand}"/>
                <Setter Property="Content" Value="{DynamicResource Log_Join}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioJoin, Path=IsChecked}" Value="False">
                <Setter Property="Command" Value="{Binding LogInCommand}"/>
                <Setter Property="Content" Value="{DynamicResource Log_Sign}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenUsers">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioUsers, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioUsers, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenProducts">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioProducts, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioProducts, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenNews">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioNews, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioNews, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="Visible/HidenOther">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=radioOther, Path=IsChecked}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=radioOther, Path=IsChecked}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="buttonBascketItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0 0 5 0"/>
        <Setter Property="FontSize" Value="9"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>